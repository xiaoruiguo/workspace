# module_linux
snippet module_linux
	#include <linux/module.h>   /*加载模块需要的函数和符号定义*/
	#include <linux/init.h>     /*初始化和清理函数*/
	#include <linux/sched.h>    /*驱动内核使用的API的定义*/
	#include <linux/version.h>  
	#include <linux/lernel.h>   /*printk*/

	/*
		name
		type bool, invbool, charp, int, long, short, uint, ulong, ushort
		perm 控制参数在sysfs中的被访问权限 
	*/
	//module_param(name, type, perm);
	//module_param_array(name, type, num, perm);

	static int __init ${21:init_func}(void)
	{
		
	}

	static void __exit ${23:exit_func}(void)
	{

	}
	EXPORT_SYMBOL_GPL(${25:});
	module_init(${22:init_func});
	module_exit(${24:exit_func});

	/*
		GPL
		GPL v2
		GPL and additional rights
		Dual BSD/GPK
		Dual MPL/GPL
		Proprietary
	*/
	MODULE_LICENSE(${1});   
	MODULE_AUTHOR(${2});
	MODULE_DESCRIPION(${3});
	MODULE_VERSION(${4});
	MODULE_ALIAS(${5});
	MODULE_DEVICE_TABLE(${6});
endsnippet
# PF_RING
snippet pfring
	pfring *pd;
	int rc;

	/////////////////  PF_RING  OPEN  ///////////////////////
	/*flags:
		#define PF_RING_DNA_SYMMETRIC_RSS 1 << 0
		#define PF_RING_REENTRANT         1 << 1
		#define PF_RING_LONG_HEADER       1 << 2
		#define PF_RING_PROMISC           1 << 3
		#define PF_RING_TIMESTAMP         1 << 4
		#define PF_RING_HW_TIMESTAMP      1 << 5
		#define PF_RING_RX_PACKET_BOUNCE  1 << 6
		#define PF_RING_DNA_FIXED_RSS_Q_0 1 << 7
	*/
    //devicename, capture len, mode
	pd = pfring_open("${1:device}", ${2:65535}, ${3:PF_RING_PROMISC});
	if(pd == NULL) {
		printf("pfring_open error [%s]\n", strerror(errno));
		return(-1);
	}else{
		u_int32_t version;
		pfring_set_application_name(pd, ${4:appname});
		pfring_version(pd, &version);

		printf("Using PF_RING v.%d.%d.%d\n",
		(version & 0xFFFF0000) >> 16,
		(version & 0x0000FF00) >> 8,
		version & 0x000000FF);
	}
	printf("# Device RX channels: %d\n", pfring_get_num_rx_channels(pd));

	/////////////////  SET CLUSTER   ///////////////////
	u_int clusterId = ${5:id};    //定义clusterId
	if(clusterId > 0) {
		/*cluster_type
			cluster_per_flow = 0,      6-tuple: <src ip, src port, dst ip, dst port, proto, vlan>  
			cluster_round_robin,
			cluster_per_flow_2_tuple,  2-tuple: <src ip,           dst ip                       >  
			cluster_per_flow_4_tuple,  4-tuple: <src ip, src port, dst ip, dst port             >  
			cluster_per_flow_5_tuple,  5-tuple: <src ip, src port, dst ip, dst port, proto      >  
		*/
		rc = pfring_set_cluster(pd, clusterId, ${6:cluster_type});
		printf("pfring_set_cluster returned %d\n", rc);
	}

	////////////////  SET DIRECTION  //////////////////
	/*direction
		rx_and_tx_direction = 0,
		rx_only_direction,
		tx_only_direction
	*/
	packet_direction direction = ${7};
	if((rc = pfring_set_direction(pd, direction)) != 0){
		printf("pfring_set_direction returned [rc=%d][direction=%d]\n", rc, direction);
	}

	///////////////   SET RULE   //////////////////////
	hash_filtering_rule hashrule;
	memset(&hashrule, 0, sizeof(hashrule));

	/* 规则id */
	hashrule.rule_id = ${8};

	/*rule_action
		forward_packet_and_stop_rule_evaluation = 0,
		dont_forward_packet_and_stop_rule_evaluation,
		execute_action_and_continue_rule_evaluation,
		execute_action_and_stop_rule_evaluation,
		forward_packet_add_rule_and_stop_rule_evaluation,  auto-filled hash rule or via plugin_add_rule() 
		forward_packet_del_rule_and_stop_rule_evaluation,  via plugin_del_rule() only 
		reflect_packet_and_stop_rule_evaluation,
		reflect_packet_and_continue_rule_evaluation,
		bounce_packet_and_stop_rule_evaluation,
		bounce_packet_and_continue_rule_evaluation
	 */
	hashrule.rule_action = ${9};
	
	if(pfring_handle_hash_filtering_rule(pd, &rule, 1) < 0){
		printf("pfring_handle_hash_filtering_rule(ADD) failed\n");
	}else{
		printf("Rule added successfully...\n");
	}

	///////////////   SET SOCKET MODE   //////////////////////
	/*
	  send_and_recv_mode = 0,
	  send_only_mode,
	  recv_only_mode
	*/
	if((rc = pfring_set_socket_mode(pd, ${10:recv_only_mode}))){
		fprintf(stderr, "pfring_set_socket_mode returned [rc=%d]\n", rc);
	}

	//////////////// PF_RING ENABLE  ///////////////////
	pfring_enable_ring(pd);
	
	///////////////  DEAL  ////////////////

	///////////////  REMOVE RULE  ///////////////////

	///////////////  PF_RING CLOSE  ///////////////////
	pfring_close(pd);
endsnippet
